name: Staging Deployment Pipeline

on:
  push:
    branches:
      - staging

jobs:
  build:
    runs-on: ubuntu-latest
    environment:
      name: staging
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Enable Corepack and Use Latest Yarn
        run: |
          corepack enable
          corepack prepare yarn@stable --activate

      - name: Install dependencies
        run: |
          yarn install

      - name: Build project
        run: |
          yarn build

      - name: Prepare build for deployment
        run: |
          mkdir -p build_output
          mkdir -p build_output/artifacts

          mv build/* build_output/artifacts/
          mv nginx/ build_output/nginx/
          mv scripts/ build_output/scripts/
          mv Dockerfile.nginx build_output/Dockerfile
          mv .gitignore build_output/.gitignore
          mv deploy.sh build_output/deploy.sh
          mv docker-compose.yml build_output/docker-compose.yml

      - name: Set up Git for commit
        uses: qoomon/actions--setup-git@v1
        with:
          user: bot

      - name: Commit and Push to Build Branch
        run: |
          git checkout --orphan build-staging
          git rm -rf .
          mv build_output/* .
          mv build_output/.gitignore .gitignore

          timestamp=$(date +"%Y-%m-%d %H:%M:%S (%Z)")

          git add .
          git commit -m "üöÄ Build deployed at ${timestamp}"
          git push origin build-staging --force

  deploy:
    name: Execute Deployment Script on Server
    needs: build
    runs-on: ubuntu-latest
    environment:
      name: staging
      url: https://staging.smswithoutborders.com:18600
    steps:
      - name: Execute Remote SSH Commands
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.KEY }}
          script: |
            set -e

            cd ${{ secrets.PROJECT_PATH }}

            echo "============================"
            echo "üöÄ Deleting local build-staging branch if exists ..."
            echo "============================"
            current_branch=$(git rev-parse --abbrev-ref HEAD)
            if [ "$current_branch" = "build-staging" ]; then
              if git branch --list main; then
                git checkout main
              elif git branch --list master; then
                git checkout master
              else
                echo "‚ùå No main or master branch to switch to before deleting build-staging!"
                exit 1
              fi
            fi
            if git branch --list build-staging; then
              git branch -D build-staging
            fi
            echo "==============================="
            echo "‚úÖ Local build-staging branch deleted (if existed)"
            echo "==============================="

            echo "============================"
            echo "üöÄ Fetching all branches ..."
            echo "============================"
            if ! git fetch --all; then
              echo "‚ùå Error fetching branches!"
              exit 1
            fi
            echo "==============================="
            echo "‚úÖ Branch fetch complete"
            echo "==============================="

            echo "============================"
            echo "üöÄ Switching to build-staging branch ..."
            echo "============================"
            if ! git checkout build-staging; then
              echo "‚ùå Error switching to build-staging branch!"
              exit 1
            fi
            echo "==============================="
            echo "‚úÖ Switched to build-staging branch"
            echo "==============================="

            echo "========================="
            echo "üöÄ Building project ..."
            echo "========================="
            if ! ${{ secrets.BUILD_CMD }}; then
              echo "‚ùå Error building project!"
              exit 1
            fi
            echo "==========================="
            echo "‚úÖ Project build complete"
            echo "==========================="

            echo "============================="
            echo "Cleaning up staging builds ..."
            echo "============================="
            if ! ${{ secrets.CLEANUP_CMD }}; then
              echo "‚ùå Error cleaning up builds!"
              exit 1
            fi
            echo "============================="
            echo "‚úÖ Cleanup complete"
            echo "============================="
